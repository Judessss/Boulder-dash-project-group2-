package model;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;

import entity.element.Element;

/**
 * <h1>The DAOElement Class</h1>
 * Access to the database
 * @author BIRAHEKA
 * @version 1.0
 */
public class DAOElement extends DAOEntity<Element> {
	/**
	 * The constructor.
	 * @param connection The connection to the database.
	 * @throws SQLException An exception can be generated by SQL.
	 */
	public DAOElement(Connection connection) throws SQLException {
		super(connection);
	}

	/**
	 * Not implemented
	 * @param entity
	 *          the entity
	 */
	@Override
	public boolean create(Element entity) {
		// Not implemented
		return false;
	}

	/**
	 * Not implemented
	 * @param entity
	 *          the entity
	 */
	@Override
	public boolean delete(Element entity) {
		// Not implemented
		return false;
	}

	/**
	 * Not implemented
	 * @param entity
	 *          the entity
	 */
	@Override
	public boolean update(Element entity) {
		// Not implemented
		return false;
	}

	/**
	 * Find a specific item in the map
	 * @param id_map the mapID
	 * @param x {@link entity.element.Position}
	 * @param y {@link entity.element.Position}
	 * @return The {@link Element}
	 */
	public char find(int id_map, int x, int y) {
		char elementSprite_ref = ' ';
		String map = "";
		String map_array[][];
		
		try {
			final String sql = "{call getMapElements(?)}";
			final CallableStatement call = this.getConnection().prepareCall(sql);
			call.setInt(1, id_map);
			call.execute();
			final ResultSet resultSet = call.getResultSet();
			if(resultSet.first()) {
				map = resultSet.getString("map");
				String part[] = map.split("(?<=\\G.{" + x + "})");
				map_array = new String[part.length][x];
				for (int i = 0; i < part.length; i++) {
					String[] part_p = part[i].split("");
					for (int j = 0; j < x; j++) {
						map_array[i][j] = part_p[j];
					}
				}
				elementSprite_ref = map_array[x][y].charAt(0);
			}
			return elementSprite_ref;
		} catch (final SQLException e) {
			e.printStackTrace();
		}
		return elementSprite_ref;
	}

	@Override
	public Element find(String code) {
		// Not implemented
		return null;
	}

	@Override
	public Element find(int id) {
		// Not implemented
		return null;
	}

}
